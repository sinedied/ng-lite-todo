#!/usr/bin/env bash
##############################################################################
# Usage: ./infra.sh <command> <project_name> [environment_name] [location]
# Creates or deletes the Azure infrastructure for this project.
##############################################################################

set -e
cd $(dirname ${BASH_SOURCE[0]})
if [ -f ".settings" ]; then
  source .settings
fi

subcommand="${1}"
project_name="${2:-$project_name}"
environment="${environment:-prod}"
environment="${3:-$environment}"
location="${location:-eastus2}"
location="${4:-$location}"
resource_group_name=rg-${project_name}-${environment}

showUsage() {
  script_name="$(basename "$0")"
  echo "Usage: ./$script_name <command> <project_name> [environment_name] [location]"
  echo "Manages the Azure infrastructure for this project."
  echo
  echo "Commands:"
  echo "  create  Creates the infrastructure for this project."
  echo "  delete  Deletes the infrastructure for this project."
  echo "  cancel  Cancels the last infrastructure deployment."
  echo "  env     Retrieve settings for the target environment."
  echo
}

function toLowerSnakeCase() {
  echo ${1} |
    perl -pe 's/([a-z\d])([A-Z]+)/$1_$2/g' |
    perl -pe 's/[ _-]+/_/g' |
    perl -ne 'print lc'
}

createSettings() {
  env_file=".${environment}.env"
  echo "# Generated settings for environment '${environment}'" > ${env_file}
  echo "# Do not edit this file manually!" >> ${env_file}
  echo >> ${env_file}
  echo $1 | jq -c '. | to_entries[] | [.key, .value.value]' |
  while IFS=$"\n" read -r output; do
    ouput_name=$(toLowerSnakeCase $(echo "$output" | jq -r '.[0]'))
    output_value=$(echo "$output" | jq -r '.[1]')
    echo "${ouput_name}=${output_value}" >> ${env_file}
  done
  echo "Settings for environment '${environment}' saved to '${env_file}'."
}

if [ -z "$project_name" ]; then
  showUsage
  echo "Error: project name is required."
  exit 1
fi

if [ "${subcommand}" == "create" ]; then
  echo "Preparing environment '${environment}' of project '${project_name}'..."
  az group create \
    --name ${resource_group_name} \
    --location ${location} \
    --output none
  echo "Resource group '${resource_group_name}' ready."
  outputs=$( \
    az deployment group create \
      --resource-group ${resource_group_name} \
      --template-file infra/main.bicep \
      --name "deployment-${project_name}-${environment}-${location}" \
      --parameters projectName=${project_name} \
          environment=${environment} \
          location=${location} \
      --query properties.outputs \
      --mode Complete \
      --verbose
  )
  createSettings "${outputs}"
  echo "Environment '${environment}' of project '${project_name}' ready."
elif [ "${subcommand}" == "delete" ]; then
  echo "Deleting environment '${environment}' of project '${project_name}'..."
  az group delete --yes --name "rg-${project_name}-${environment}"
  echo "Environment '${environment}' of project '${project_name}' deleted."
elif [ "${subcommand}" == "cancel" ]; then
  echo "Cancelling preparation of environment '${environment}' of project '${project_name}'..."
  az deployment group cancel \
    --resource-group ${resource_group_name} \
    --name "deployment-${project_name}-${environment}-${location}"
    --verbose
  echo "Preparation of '${environment}' of project '${project_name}' cancelled."
elif [ "${subcommand}" == "env" ]; then
  echo "Retrieving settings for environment '${environment}' of project '${project_name}'..." 
  outputs=$( \
    az deployment group show \
      --resource-group ${resource_group_name} \
      --name "deployment-${project_name}-${environment}-${location}" \
      --query properties.outputs \
  )
  createSettings "${outputs}"
else
  showUsage
  exit 1
fi
